<?php

namespace gossi\formatter\config;

use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class ProfileDefinition implements ConfigurationInterface {

	public function getConfigTreeBuilder() {
		$treeBuilder = new TreeBuilder();

		$formatter = $treeBuilder->root('formatter');
		$formatter
			->children()
			
				// indentation
				->arrayNode('indentation')
					->children()
						->enumNode('character')
							->values(['tab', 'space'])
						->end()
						->integerNode('size')->end()
						->booleanNode('struct')->end()
						->booleanNode('function')->end()
						->booleanNode('blocks')->end()
						->booleanNode('switch')->end()
						->booleanNode('case')->end()
						->booleanNode('break')->end()
						->booleanNode('empty_lines')->end()
					->end()
				->end()
		
				// braces
				->arrayNode('braces')
					->children()
						->enumNode('struct')
							->values(['same', 'next'])
						->end()
						->enumNode('function')
							->values(['same', 'next'])
						->end()
						->enumNode('blocks')
							->values(['same', 'next'])
						->end()
					->end()
				->end()
				
				// whitespace
				->arrayNode('whitespace')
					->children()
						->booleanNode('before_curly')->end()
						->booleanNode('after_curly')->end()
						->booleanNode('before_open')->end()
						->booleanNode('after_open')->end()
						->booleanNode('before_close')->end()
						->booleanNode('before_comma')->end()
						->booleanNode('after_comma')->end()
						->booleanNode('before_semicolon')->end()
						->booleanNode('after_semicolon')->end()
						->booleanNode('before_colon')->end()
						->booleanNode('after_colon')->end()
						->booleanNode('before_doublecolon')->end()
						->booleanNode('after_doublecolon')->end()
						->booleanNode('before_arrow')->end()
						->booleanNode('after_arrow')->end()
						->booleanNode('before_assignment')->end()
						->booleanNode('after_assignment')->end()
						->booleanNode('before_binary')->end()
						->booleanNode('after_binary')->end()
						->booleanNode('before_unary')->end()
						->booleanNode('after_unary')->end()
						->booleanNode('before_prefix')->end()
						->booleanNode('after_prefix')->end()
						->booleanNode('before_postfix')->end()
						->booleanNode('after_postfix')->end()
						->booleanNode('before_questionmark')->end()
						->booleanNode('after_questionmark')->end()

// 						->arrayNode('struct')
// 							->children()
// 								->booleanNode('before_curly')->end()
// 								->booleanNode('before_comma')->end()
// 								->booleanNode('after_comma')->end()
// 							->end()
// 						->end()
// 						->arrayNode('properties')
// 							->children()
// 								->booleanNode('before_comma')->end()
// 								->booleanNode('after_comma')->end()
// 							->end()
// 						->end()
// 						->arrayNode('constants')
// 							->children()
// 								->booleanNode('before_comma')->end()
// 								->booleanNode('after_comma')->end()
// 							->end()
// 						->end()
// 						->arrayNode('function')
// 							->children()
// 								->booleanNode('before_curly')->end()
// 								->booleanNode('before_open')->end()
// 								->booleanNode('after_open')->end()
// 								->booleanNode('before_close')->end()
// 								->booleanNode('before_comma')->end()
// 								->booleanNode('after_comma')->end()
// 							->end()
// 						->end()
// 						->arrayNode('blocks')
// 							->children()
// 								->booleanNode('before_curly')->end()
// 								->booleanNode('after_curly')->end()
// 							->end()
// 						->end()
// 						->arrayNode('ifelse')
// 							->children()
// 								->booleanNode('before_open')->end()
// 								->booleanNode('after_open')->end()
// 								->booleanNode('before_close')->end()
// 							->end()
// 						->end()
// 						->arrayNode('for')
// 							->children()
// 								->booleanNode('before_open')->end()
// 								->booleanNode('after_open')->end()
// 								->booleanNode('before_close')->end()
// 								->booleanNode('before_comma')->end()
// 								->booleanNode('after_comma')->end()
// 								->booleanNode('before_semicolon')->end()
// 								->booleanNode('after_semicolon')->end()
// 							->end()
// 						->end()
// 						->arrayNode('foreach')
// 							->children()
// 								->booleanNode('before_open')->end()
// 								->booleanNode('after_open')->end()
// 								->booleanNode('before_close')->end()
// 								->booleanNode('before_arrow')->end()
// 								->booleanNode('after_arrow')->end()
// 							->end()
// 						->end()
// 						->arrayNode('switch')
// 							->children()
// 								->booleanNode('before_open')->end()
// 								->booleanNode('after_open')->end()
// 								->booleanNode('before_close')->end()
// 								->booleanNode('before_colon')->end()
// 							->end()
// 						->end()
					->end()
				->end()
		
				// newlines
				->arrayNode('newlines')
					->children()
						->booleanNode('elseif_else')->end()
						->booleanNode('catch')->end()
						->booleanNode('finally')->end()
						->booleanNode('do_while')->end()
					->end()
				->end()
				
				// blanks
				->arrayNode('blanks')
					->children()
						->integerNode('before_namespace')->end()
						->integerNode('after_namespace')->end()
						->integerNode('after_use')->end()
						->integerNode('before_struct')->end()
						->integerNode('before_traits')->end()
						->integerNode('before_constant')->end()
						->integerNode('before_properties')->end()
						->integerNode('before_function')->end()
						->integerNode('beginning_function')->end()
						->integerNode('end_function')->end()
						->integerNode('end_struct')->end()
						->integerNode('end_file')->end()
					->end()
				->end()
				
			->end()
		;
		
		return $treeBuilder;
	}
}